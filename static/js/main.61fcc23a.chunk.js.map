{"version":3,"sources":["components/Recipe.js","components/Getting_api.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","ingredients","calories","image","className","map","ingredient","text","src","alt","Getting_api","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","recipe","key","uuid","label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAmBeA,EAhBC,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAQC,EAAoC,EAApCA,YAAcC,EAAsB,EAAtBA,SAAWC,EAAW,EAAXA,MAGnD,OACG,yBAAKC,UAAU,gBACf,4BAAKJ,GACL,6BACA,4BACKC,EAAYI,KAAI,SAAAC,GAAU,OAC7B,4BAAKA,EAAWC,SAFlB,KAGA,0CAAgBL,GAChB,yBAAKM,IAAKL,EAAOM,IAAKT,M,gBCuCVU,EAhDK,WAElB,IAFwB,EAKMC,mBAAS,IALf,mBAKjBC,EALiB,KAKRC,EALQ,OAMIF,mBAAS,IANb,mBAMjBG,EANiB,KAMTC,EANS,OAOEJ,mBAAS,WAPX,mBAOjBK,EAPiB,KAOVC,EAPU,KAYxBC,qBAAU,WACRC,MAAiB,CAACH,IAGpB,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAqCL,EAArC,mBAff,WAee,oBAdd,qCAaE,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAWW,EAAKC,MAHA,2CAAH,qDAYf,OACE,yBAAKC,SAPc,SAACC,GACpBA,EAAEC,iBACFX,EAASH,GACRC,EAAU,MAMT,0BAAMX,UAAU,eAEd,2BAAOA,UAAU,eAAgByB,KAAK,SAASC,YAAY,sBACzDC,MAAOjB,EAASkB,SAAU,SAACL,GAAD,OAAOZ,EAAUY,EAAEM,OAAOF,UAEtD,4BAAQ3B,UAAU,gBAAgByB,KAAK,UAAvC,aAIJ,yBAAKzB,UAAU,eAAf,IAA+BQ,EAAQP,KAAI,SAAC6B,GAAD,OAAe,kBAAC,EAAD,CAASC,IAAKC,MAAQpC,MAAOkC,EAAOA,OAAOG,MACrGnC,SAAUgC,EAAOA,OAAOhC,SAAcC,MAAO+B,EAAOA,OAAO/B,MAC1DF,YAAaiC,EAAOA,OAAOjC,oBC/BjBqC,MARf,WACE,OACE,yBAAKlC,UAAU,OACd,kBAAC,EAAD,QCCemC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.61fcc23a.chunk.js","sourcesContent":["import React  from 'react' ;\r\n\r\n//recieve the props to the child component & destruction for them\r\nconst Recipe  = ({title , ingredients  ,calories , image }) =>{\r\n\r\n\r\nreturn(           // show the data to the user\r\n   <div className=\"recpieDetail\" >\r\n   <h1>{title}</h1>\r\n   <hr></hr>\r\n   <ul>\r\n       {ingredients.map(ingredient=>( \r\n     <li>{ingredient.text}</li>))} </ul>\r\n   <p> calories : {calories}</p>\r\n   <img src={image} alt={title} />\r\n\r\n    </div>\r\n) }\r\n\r\nexport default Recipe  ;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport uuid from \"react-uuid\";\r\n\r\nconst Getting_api = () => {  \r\n\r\n  const App_id = \"6fa4e747\"; // keys from the website that provide the api\r\n  const App_key = \"60328fb9a6d3b25839cc084927c8ca33\";\r\n\r\n  const [recipes, setRecipes] = useState([]); // state to store data from the api\r\n  const [search, setSearch] = useState(\"\"); // store the current input value\r\n  const [query, setQuery] = useState(\"chicken\"); //get the final input value & pass it to the query at submit\r\n \r\n\r\n  /* useEffect activats at the render of the app & have the fetch function inside , we use query state not search\r\n because it will only render once onSubmit so send 1 requst instead of sending requst every time we write letter*/\r\n  useEffect(() => {\r\n    getRecipe();  }, [query]);\r\n\r\n\r\n  const getRecipe = async () => {        //function to awaits api data to be fetched    \r\n    const response = await fetch( `https://api.edamam.com/search?q=${query}&app_id=${App_id}&app_key=${App_key}` );\r\n    const data = await response.json();\r\n    setRecipes(data.hits);    };\r\n\r\n\r\n  const handleSubmit = (e) => {     //function to stop refresh & pass the input value to query only after Submit    \r\n    e.preventDefault();\r\n    setQuery(search);         \r\n     setSearch('') };\r\n\r\n\r\n  return (           //search form & passing the data as props to Recip component    \r\n    <div onSubmit={handleSubmit}>\r\n\r\n      <form className=\"recipe_form\">\r\n\r\n        <input className=\"recipe_input\"  type=\"search\" placeholder=\"Enter the meal name\"\r\n          value={search}  onChange={(e) => setSearch(e.target.value)} ></input>\r\n\r\n        <button className=\"recipe_button\" type=\"submit\"> search </button>\r\n\r\n      </form>\r\n\r\n    <div className=\"recipesList\"> {recipes.map((recipe) => (  <Recipe  key={uuid()} title={recipe.recipe.label}      \r\n    calories={recipe.recipe.calories}     image={recipe.recipe.image}\r\n     ingredients={recipe.recipe.ingredients}  /> ))}</div> \r\n\r\n  \r\n    </div>  );\r\n};\r\n\r\nexport default Getting_api;\r\n","/* eslint-disable react/jsx-pascal-case */\n// importing the files \n\nimport React from 'react';\nimport './App.css';\nimport Getting_api from './components/Getting_api'\n\n// function to pass the components to (index.js) which will render this file into index.html\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Getting_api />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}